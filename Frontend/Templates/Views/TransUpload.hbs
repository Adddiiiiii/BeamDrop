<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BeamDrop</title>
    <link rel="stylesheet" href="../CSS/styleUpload.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/css/all.min.css">
</head>
<body>
    {{>header}}
    <div class="container">
        <div class="main">
            <h1 style="color:white;">Transfer File, <br>{{fullname}} <br><br>
            <button class="transfer-device-btn" id="sender-btn">Create Room</button>
            <br><br><b id="room-id">Room Id:</b>
            </h1>
            <div class="file-upload-container">
                <h1>Drag and Drop File Uploader</h1>
                <div class="file-upload">
                    <form class="file-upload-form" id="fileUploadForm">
                        <label for="file" class="file-upload-label" id="fileUploadLabel">
                            <div class="file-upload-design">
                                <svg viewBox="0 0 640 512" height="1em">
                                    <path
                                    d="M144 480C64.5 480 0 415.5 0 336c0-62.8 40.2-116.2 96.2-135.9c-.1-2.7-.2-5.4-.2-8.1c0-88.4 71.6-160 160-160c59.3 0 111 32.2 138.7 80.2C409.9 102 428.3 96 448 96c53 0 96 43 96 96c0 12.2-2.3 23.8-6.4 34.6C596 238.4 640 290.1 640 352c0 70.7-57.3 128-128 128H144zm79-217c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l39-39V392c0 13.3 10.7 24 24 24s24-10.7 24-24V257.9l39 39c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9l-80-80c-9.4-9.4-24.6-9.4-33.9 0l-80 80z"
                                    ></path>
                                </svg>
                                <p class="custom-color">Drag and Drop</p>
                                <p class="custom-color">or</p>
                                <span class="browse-button">Browse file</span>
                            </div>
                            <input id="file" type="file" multiple/>
                        </label>
                    </form>
                </div>
                <div class="files-uploaded" id="filesUploaded"></div>
            </div>
        </div>
        <!-- Script JS -->
        <script src="https://cdn.socket.io/4.5.1/socket.io.min.js"></script>
        <script>
            const fileInput = document.getElementById('file');
            const fileUploadLabel = document.getElementById('fileUploadLabel');
            const filesUploadedContainer = document.getElementById('filesUploaded');
            const senderBtn = document.getElementById('sender-btn');
            const roomIdDisplay = document.getElementById('room-id');
            const socket = io();

            let previousRoomID = null;

            function generateID() {
                return `${Math.trunc(Math.random() * 999)}-${Math.trunc(Math.random() * 999)}-${Math.trunc(Math.random() * 999)}`;
            }

            fileUploadLabel.addEventListener('dragover', (e) => {
                e.preventDefault();
                fileUploadLabel.classList.add('drag-over');
            });

            fileUploadLabel.addEventListener('dragleave', () => {
                fileUploadLabel.classList.remove('drag-over');
            });

            fileUploadLabel.addEventListener('drop', (e) => {
                e.preventDefault();
                fileUploadLabel.classList.remove('drag-over');
                const files = e.dataTransfer.files;
                handleFiles(files);
            });

            fileInput.addEventListener('change', () => {
                const files = fileInput.files;
                handleFiles(files);
            });

            function handleFiles(files) {
                const fileList = Array.from(files);
                
                fileList.forEach((file) => {
                    const fileName = truncateFileName(file.name, 10);
                    const fileSize = formatFileSize(file.size);
                    
                    const fileItem = document.createElement('div');
                    fileItem.classList.add('file-item');
                    fileItem.innerHTML = `
                        <div class= "file">
                            <img src="https://img.icons8.com/?size=256&id=11651&format=png" />
                            <span class="file-name">${fileName}</span>
                            <span class="file-size">${fileSize}</span>
                            <div class="uploaded">
                                <img id="checkIcon" src="https://img.icons8.com/?size=256&id=7690&format=png" />
                                <p>Uploading...</p>
                            </div>
                        </div>
                    `;

                    filesUploadedContainer.appendChild(fileItem);

                    // Start file upload
                    uploadFile(file);
                });
            }

            function truncateFileName(name, maxLength) {
                return name.length > maxLength ? name.substring(0, maxLength) + '...' : name;
            }

            function formatFileSize(size) {
                if (size === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
                const i = parseInt(Math.floor(Math.log(size) / Math.log(k)));
                return Math.round(100 * (size / Math.pow(k, i))) / 100 + ' ' + sizes[i];
            }

            function uploadFile(file) {
                const roomID = roomIdDisplay.textContent.split('Room ID: ')[1].trim();
                const chunkSize = 1024 * 1024; // 1 MB chunks
                let offset = 0;
                
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    socket.emit('file-raw', {
                        uid: roomID,
                        fileName: file.name, // Include file name
                        buffer: e.target.result
                    });
                    offset += chunkSize;

                    if (offset < file.size) {
                        readNextChunk();
                    } else {
                        console.log('File upload complete.');
                    }
                };

                function readNextChunk() {
                    const chunk = file.slice(offset, offset + chunkSize);
                    reader.readAsArrayBuffer(chunk);
                }

                readNextChunk();
            }

            senderBtn.addEventListener('click', () => {
                const roomID = generateID();
                roomIdDisplay.innerHTML = `Room ID: ${roomID}`;
                console.log(`Room ID: ${roomID}`);

                if (previousRoomID) {
                    socket.emit('leave-room', { uid: previousRoomID });
                }

                socket.emit('sender-join', { uid: roomID });
                previousRoomID = roomID;
            });
        </script>
        {{>footer}}
    </div>
</body>
</html>
